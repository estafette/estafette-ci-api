// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package cloudsourceapi is a generated GoMock package.
package cloudsourceapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockClient) GetAccessToken(ctx context.Context) (AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", ctx)
	ret0, _ := ret[0].(AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockClientMockRecorder) GetAccessToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockClient)(nil).GetAccessToken), ctx)
}

// GetEstafetteManifest mocks base method.
func (m *MockClient) GetEstafetteManifest(ctx context.Context, accesstoken AccessToken, notification PubSubNotification, gitClone func(string, string, string) error) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstafetteManifest", ctx, accesstoken, notification, gitClone)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEstafetteManifest indicates an expected call of GetEstafetteManifest.
func (mr *MockClientMockRecorder) GetEstafetteManifest(ctx, accesstoken, notification, gitClone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstafetteManifest", reflect.TypeOf((*MockClient)(nil).GetEstafetteManifest), ctx, accesstoken, notification, gitClone)
}

// JobVarsFunc mocks base method.
func (m *MockClient) JobVarsFunc(ctx context.Context) func(context.Context, string, string, string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobVarsFunc", ctx)
	ret0, _ := ret[0].(func(context.Context, string, string, string) (string, error))
	return ret0
}

// JobVarsFunc indicates an expected call of JobVarsFunc.
func (mr *MockClientMockRecorder) JobVarsFunc(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobVarsFunc", reflect.TypeOf((*MockClient)(nil).JobVarsFunc), ctx)
}
