image:
  repository: estafette/estafette-ci-api
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  credentials: {}
    # registry: docker.io
    # username: john_doe
    # password: changeme

deployment:
  replicaCount: 1

  env: []

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  podAnnotations: {}
    # prometheus.io/scrape: 'true'
    # prometheus.io/path: '/metrics'
    # prometheus.io/port: '5000'
    # prometheus.io/scheme: 'http'

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  nodeSelector: {}

  tolerations: []

  affinity: {}

  extraPodLabels: {}

  # specify extra containers as a string, interpreted with tpl; this allows use of helm values.
  # - name: {{ .Chart.Name }}-sidecar
  # image: registry/git-sync
  extraContainers: |

  # specify extra volumes 
  extraVolumes: |

  # specify extra volume mounts for the main container
  extraVolumeMounts: |

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
jobNamespaceOverride: ""

extraLabels: {}

extraSecrets: []
# - key: gcp
#   annotations: {}
#   mountPath: /gcp
#   data:
#     service-account-key.json: |
#       {}

extraConfigmaps: []
# - key: templates
#   annotations: {}
#   mountPath: /templates
#   data:
#     manifest-docker.tmpl: |
#       labels:
#         container: {{.ContainerName}}
#         team: {{.TeamName}}
#         language: docker

#       stages:
#         bake:
#           image: extensions/docker:stable
#           action: build
#           repositories:
#           - estafette

#         push-to-docker-registry:
#           image: extensions/docker:stable
#           action: push
#           repositories:
#           - estafette

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  port: 80
  annotations: {}
    # cloud.google.com/neg: '{"ingress": true}'

# ingress to Estafette CI's web ui and api
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ci.estafette.io
      paths:
      - path: /api/
        backend:
          serviceName: estafette-ci-api
          servicePort: http
      - path: /
        backend:
          serviceName: estafette-ci-web
          servicePort: http
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# optional separate ingress for webhooks if the main ingress is not publicly accessible
ingressWebhooks:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ci-webhooks.estafette.io
      paths:
      - path: /api/integrations/bitbucket
        backend:
          serviceName: estafette-ci-api
          servicePort: http
      - path: /api/integrations/cloudsource
        backend:
          serviceName: estafette-ci-api
          servicePort: http
      - path: /api/integrations/github
        backend:
          serviceName: estafette-ci-api
          servicePort: http
      - path: /api/integrations/pubsub
        backend:
          serviceName: estafette-ci-api
          servicePort: http
      - path: /api/integrations/slack
        backend:
          serviceName: estafette-ci-api
          servicePort: http
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

secret:
  enabled: true

  files: {}
    # # the aes-256 key to encrypt/decrypt estafette secrets
    # secretDecryptionKey:

    # # private key file for github app to communicate with the github api
    # githubPrivateKey:

config:
  enabled: true

  files: |
    config.yaml: |
      integrations:
        github:
          enable: false
          privateKeyPath: /secrets/private-key.pem
          appID: 15
          clientID: asdas2342
          clientSecret: estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)
          webhookSecret: estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)
          whitelistedInstallations:
          - 15
          - 83
          installationOrganizations:
          - installation: 15
            organizations:
            - name: Estafette
          - installation: 83
            organizations:
            - name: Estafette

        bitbucket:
          enable: false
          apiKey: sd9ewiwuejkwejkewk
          appOAuthKey: 2390w3e90jdsk
          appOAuthSecret: estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)
          whitelistedOwners:
          - estafette
          ownerOrganizations:
          - owner: estafette
            organizations:
            - name: Estafette

        slack:
          enable: false
          clientID: d9ew90weoijewjke
          clientSecret: estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)
          appVerificationToken: estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)
          appOAuthAccessToken: estafette.secret(deFTz5Bdjg6SUe29.oPIkXbze5G9PNEWS2-ZnArl8BCqHnx4MdTdxHg37th9u)

        pubsub:
          enable: false
          defaultProject: estafette
          endpoint: https://ci-integrations.estafette.io/api/integrations/pubsub/events
          audience: estafette-audience
          serviceAccountEmail: estafette@estafette.iam.gserviceaccount.com
          subscriptionNameSuffix: ~estafette-ci-pubsub-trigger
          subscriptionIdleExpirationDays: 365

        cloudsource:
          enable: false
          whitelistedProjects:
          - estafette
          projectOrganizations:
          - project: estafette
            organizations:
            - name: Estafette

        prometheus:
          enable: false
          serverURL: http://prometheus-server.monitoring.svc.cluster.local
          scrapeIntervalSeconds: 10

        bigquery:
          enable: false
          projectID: my-gcp-project
          dataset: my-dataset

        gcs:
          enable: false
          projectID: my-gcp-project
          bucket: my-bucket
          logsDir: logs

      apiServer:
        baseURL:
        serviceURL:

      jobs:
        # the namespace in which build/release jobs are created
        namespace: {{ .Release.Namespace }}-jobs
        minCPUCores: 0.1
        maxCPUCores: 7.0
        cpuRequestRatio: 1.0
        minMemoryBytes: 67108864
        maxMemoryBytes: 21474836480
        memoryRequestRatio: 1.25

      auth:
        iap:
          enable:
          audience:
        apiKey:

      database:
        databaseName:
        host:
        insecure:
        certificateDir:
        port:
        user:
        password:

      credentials:
      - name:
        type: 'container-registry'
        repository:
        private: false
        username:
        password:

      trustedImages:
      - path: extensions/git-clone
        injectedCredentialTypes:
        - bitbucket-api-token
        - github-api-token
      - path: extensions/git-trigger
        injectedCredentialTypes:
        - bitbucket-api-token
        - github-api-token
      - path: extensions/docker
        runDocker: true
        injectedCredentialTypes:
        - container-registry
      - path: extensions/prefetch
        runDocker: true
        injectedCredentialTypes:
        - container-registry
      - path: extensions/gke
        injectedCredentialTypes:
        - kubernetes-engine
      - path: extensions/gcs
        injectedCredentialTypes:
        - kubernetes-engine
      - path: extensions/cloud-function
        injectedCredentialTypes:
        - kubernetes-engine
      - path: extensions/bitbucket-status
        injectedCredentialTypes:
        - bitbucket-api-token
      - path: extensions/github-status
        injectedCredentialTypes:
        - github-api-token
      - path: extensions/github-release
        injectedCredentialTypes:
        - github-api-token
      - path: extensions/slack-build-status
        injectedCredentialTypes:
        - slack-webhook
      - path: extensions/npm-audit
        injectedCredentialTypes:
        - slack-webhook
      - path: extensions/dotnet
        injectedCredentialTypes:
        - nuget-server
        - sonarqube-server
      - path: estafette/estafette-ci-builder
        runPrivileged: true
        whitelistedPipelines: github.com/estafette/estafette-ci-builder
      - path: extensions/cloudflare-purge
        injectedCredentialTypes:
        - cloudflare
      - path: bsycorp/kind
        runPrivileged: true

      docker:
        registryMirror: https://mirror.gcr.io
        dindMtu: 1460
        dindBip: 192.168.1.1/24
        dindNetwork:
          name: estafette
          subnet: 192.168.2.1/24
          gateway: 192.168.2.1