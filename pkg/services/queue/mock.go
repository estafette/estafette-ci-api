// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package queue is a generated GoMock package.
package queue

import (
	context "context"
	reflect "reflect"

	manifest "github.com/estafette/estafette-ci-manifest"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockService) CloseConnection(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnection", ctx)
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockServiceMockRecorder) CloseConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockService)(nil).CloseConnection), ctx)
}

// CreateConnection mocks base method.
func (m *MockService) CreateConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockServiceMockRecorder) CreateConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockService)(nil).CreateConnection), ctx)
}

// InitSubscriptions mocks base method.
func (m *MockService) InitSubscriptions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSubscriptions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSubscriptions indicates an expected call of InitSubscriptions.
func (mr *MockServiceMockRecorder) InitSubscriptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSubscriptions", reflect.TypeOf((*MockService)(nil).InitSubscriptions), ctx)
}

// PublishBitbucketEvent mocks base method.
func (m *MockService) PublishBitbucketEvent(ctx context.Context, bitbucketEvent manifest.EstafetteBitbucketEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBitbucketEvent", ctx, bitbucketEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBitbucketEvent indicates an expected call of PublishBitbucketEvent.
func (mr *MockServiceMockRecorder) PublishBitbucketEvent(ctx, bitbucketEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBitbucketEvent", reflect.TypeOf((*MockService)(nil).PublishBitbucketEvent), ctx, bitbucketEvent)
}

// PublishGitEvent mocks base method.
func (m *MockService) PublishGitEvent(ctx context.Context, gitEvent manifest.EstafetteGitEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishGitEvent", ctx, gitEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishGitEvent indicates an expected call of PublishGitEvent.
func (mr *MockServiceMockRecorder) PublishGitEvent(ctx, gitEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishGitEvent", reflect.TypeOf((*MockService)(nil).PublishGitEvent), ctx, gitEvent)
}

// PublishGithubEvent mocks base method.
func (m *MockService) PublishGithubEvent(ctx context.Context, githubEvent manifest.EstafetteGithubEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishGithubEvent", ctx, githubEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishGithubEvent indicates an expected call of PublishGithubEvent.
func (mr *MockServiceMockRecorder) PublishGithubEvent(ctx, githubEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishGithubEvent", reflect.TypeOf((*MockService)(nil).PublishGithubEvent), ctx, githubEvent)
}

// ReceiveBitbucketEvent mocks base method.
func (m *MockService) ReceiveBitbucketEvent(bitbucketEvent *manifest.EstafetteBitbucketEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveBitbucketEvent", bitbucketEvent)
}

// ReceiveBitbucketEvent indicates an expected call of ReceiveBitbucketEvent.
func (mr *MockServiceMockRecorder) ReceiveBitbucketEvent(bitbucketEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveBitbucketEvent", reflect.TypeOf((*MockService)(nil).ReceiveBitbucketEvent), bitbucketEvent)
}

// ReceiveCronEvent mocks base method.
func (m *MockService) ReceiveCronEvent(cronEvent *manifest.EstafetteCronEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveCronEvent", cronEvent)
}

// ReceiveCronEvent indicates an expected call of ReceiveCronEvent.
func (mr *MockServiceMockRecorder) ReceiveCronEvent(cronEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveCronEvent", reflect.TypeOf((*MockService)(nil).ReceiveCronEvent), cronEvent)
}

// ReceiveGitEvent mocks base method.
func (m *MockService) ReceiveGitEvent(gitEvent *manifest.EstafetteGitEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveGitEvent", gitEvent)
}

// ReceiveGitEvent indicates an expected call of ReceiveGitEvent.
func (mr *MockServiceMockRecorder) ReceiveGitEvent(gitEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveGitEvent", reflect.TypeOf((*MockService)(nil).ReceiveGitEvent), gitEvent)
}

// ReceiveGithubEvent mocks base method.
func (m *MockService) ReceiveGithubEvent(githubEvent *manifest.EstafetteGithubEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveGithubEvent", githubEvent)
}

// ReceiveGithubEvent indicates an expected call of ReceiveGithubEvent.
func (mr *MockServiceMockRecorder) ReceiveGithubEvent(githubEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveGithubEvent", reflect.TypeOf((*MockService)(nil).ReceiveGithubEvent), githubEvent)
}
