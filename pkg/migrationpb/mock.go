// Code generated by MockGen. DO NOT EDIT.
// Source: migrate_grpc.pb.go

// Package migrationpb is a generated GoMock package.
package migrationpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockServiceClient is a mock of ServiceClient interface.
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClientMockRecorder
}

// MockServiceClientMockRecorder is the mock recorder for MockServiceClient.
type MockServiceClientMockRecorder struct {
	mock *MockServiceClient
}

// NewMockServiceClient creates a new mock instance.
func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClient) EXPECT() *MockServiceClientMockRecorder {
	return m.recorder
}

// Migrate mocks base method.
func (m *MockServiceClient) Migrate(ctx context.Context, opts ...grpc.CallOption) (Service_MigrateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Migrate", varargs...)
	ret0, _ := ret[0].(Service_MigrateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migrate indicates an expected call of Migrate.
func (mr *MockServiceClientMockRecorder) Migrate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockServiceClient)(nil).Migrate), varargs...)
}

// MockService_MigrateClient is a mock of Service_MigrateClient interface.
type MockService_MigrateClient struct {
	ctrl     *gomock.Controller
	recorder *MockService_MigrateClientMockRecorder
}

// MockService_MigrateClientMockRecorder is the mock recorder for MockService_MigrateClient.
type MockService_MigrateClientMockRecorder struct {
	mock *MockService_MigrateClient
}

// NewMockService_MigrateClient creates a new mock instance.
func NewMockService_MigrateClient(ctrl *gomock.Controller) *MockService_MigrateClient {
	mock := &MockService_MigrateClient{ctrl: ctrl}
	mock.recorder = &MockService_MigrateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService_MigrateClient) EXPECT() *MockService_MigrateClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockService_MigrateClient) CloseAndRecv() (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockService_MigrateClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockService_MigrateClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockService_MigrateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockService_MigrateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockService_MigrateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockService_MigrateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockService_MigrateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockService_MigrateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockService_MigrateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockService_MigrateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockService_MigrateClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockService_MigrateClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockService_MigrateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockService_MigrateClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockService_MigrateClient) Send(arg0 *Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockService_MigrateClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockService_MigrateClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockService_MigrateClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockService_MigrateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockService_MigrateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockService_MigrateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockService_MigrateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockService_MigrateClient)(nil).Trailer))
}

// MockServiceServer is a mock of ServiceServer interface.
type MockServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceServerMockRecorder
}

// MockServiceServerMockRecorder is the mock recorder for MockServiceServer.
type MockServiceServerMockRecorder struct {
	mock *MockServiceServer
}

// NewMockServiceServer creates a new mock instance.
func NewMockServiceServer(ctrl *gomock.Controller) *MockServiceServer {
	mock := &MockServiceServer{ctrl: ctrl}
	mock.recorder = &MockServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceServer) EXPECT() *MockServiceServerMockRecorder {
	return m.recorder
}

// Migrate mocks base method.
func (m *MockServiceServer) Migrate(arg0 Service_MigrateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockServiceServerMockRecorder) Migrate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockServiceServer)(nil).Migrate), arg0)
}

// mustEmbedUnimplementedServiceServer mocks base method.
func (m *MockServiceServer) mustEmbedUnimplementedServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServiceServer")
}

// mustEmbedUnimplementedServiceServer indicates an expected call of mustEmbedUnimplementedServiceServer.
func (mr *MockServiceServerMockRecorder) mustEmbedUnimplementedServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServiceServer", reflect.TypeOf((*MockServiceServer)(nil).mustEmbedUnimplementedServiceServer))
}

// MockUnsafeServiceServer is a mock of UnsafeServiceServer interface.
type MockUnsafeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeServiceServerMockRecorder
}

// MockUnsafeServiceServerMockRecorder is the mock recorder for MockUnsafeServiceServer.
type MockUnsafeServiceServerMockRecorder struct {
	mock *MockUnsafeServiceServer
}

// NewMockUnsafeServiceServer creates a new mock instance.
func NewMockUnsafeServiceServer(ctrl *gomock.Controller) *MockUnsafeServiceServer {
	mock := &MockUnsafeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeServiceServer) EXPECT() *MockUnsafeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedServiceServer mocks base method.
func (m *MockUnsafeServiceServer) mustEmbedUnimplementedServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServiceServer")
}

// mustEmbedUnimplementedServiceServer indicates an expected call of mustEmbedUnimplementedServiceServer.
func (mr *MockUnsafeServiceServerMockRecorder) mustEmbedUnimplementedServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServiceServer", reflect.TypeOf((*MockUnsafeServiceServer)(nil).mustEmbedUnimplementedServiceServer))
}

// MockService_MigrateServer is a mock of Service_MigrateServer interface.
type MockService_MigrateServer struct {
	ctrl     *gomock.Controller
	recorder *MockService_MigrateServerMockRecorder
}

// MockService_MigrateServerMockRecorder is the mock recorder for MockService_MigrateServer.
type MockService_MigrateServerMockRecorder struct {
	mock *MockService_MigrateServer
}

// NewMockService_MigrateServer creates a new mock instance.
func NewMockService_MigrateServer(ctrl *gomock.Controller) *MockService_MigrateServer {
	mock := &MockService_MigrateServer{ctrl: ctrl}
	mock.recorder = &MockService_MigrateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService_MigrateServer) EXPECT() *MockService_MigrateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockService_MigrateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockService_MigrateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockService_MigrateServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockService_MigrateServer) Recv() (*Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockService_MigrateServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockService_MigrateServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockService_MigrateServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockService_MigrateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockService_MigrateServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockService_MigrateServer) SendAndClose(arg0 *Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockService_MigrateServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockService_MigrateServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockService_MigrateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockService_MigrateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockService_MigrateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockService_MigrateServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockService_MigrateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockService_MigrateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockService_MigrateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockService_MigrateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockService_MigrateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockService_MigrateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockService_MigrateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockService_MigrateServer)(nil).SetTrailer), arg0)
}

// MockLogCheckClient is a mock of LogCheckClient interface.
type MockLogCheckClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogCheckClientMockRecorder
}

// MockLogCheckClientMockRecorder is the mock recorder for MockLogCheckClient.
type MockLogCheckClientMockRecorder struct {
	mock *MockLogCheckClient
}

// NewMockLogCheckClient creates a new mock instance.
func NewMockLogCheckClient(ctrl *gomock.Controller) *MockLogCheckClient {
	mock := &MockLogCheckClient{ctrl: ctrl}
	mock.recorder = &MockLogCheckClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogCheckClient) EXPECT() *MockLogCheckClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockLogCheckClient) Check(ctx context.Context, opts ...grpc.CallOption) (LogCheck_CheckClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(LogCheck_CheckClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockLogCheckClientMockRecorder) Check(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockLogCheckClient)(nil).Check), varargs...)
}

// MockLogCheck_CheckClient is a mock of LogCheck_CheckClient interface.
type MockLogCheck_CheckClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogCheck_CheckClientMockRecorder
}

// MockLogCheck_CheckClientMockRecorder is the mock recorder for MockLogCheck_CheckClient.
type MockLogCheck_CheckClientMockRecorder struct {
	mock *MockLogCheck_CheckClient
}

// NewMockLogCheck_CheckClient creates a new mock instance.
func NewMockLogCheck_CheckClient(ctrl *gomock.Controller) *MockLogCheck_CheckClient {
	mock := &MockLogCheck_CheckClient{ctrl: ctrl}
	mock.recorder = &MockLogCheck_CheckClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogCheck_CheckClient) EXPECT() *MockLogCheck_CheckClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockLogCheck_CheckClient) CloseAndRecv() (*LogCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*LogCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockLogCheck_CheckClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockLogCheck_CheckClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLogCheck_CheckClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLogCheck_CheckClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLogCheck_CheckClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLogCheck_CheckClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLogCheck_CheckClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockLogCheck_CheckClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLogCheck_CheckClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLogCheck_CheckClient) Send(arg0 *LogObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLogCheck_CheckClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLogCheck_CheckClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLogCheck_CheckClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLogCheck_CheckClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLogCheck_CheckClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLogCheck_CheckClient)(nil).Trailer))
}

// MockLogCheckServer is a mock of LogCheckServer interface.
type MockLogCheckServer struct {
	ctrl     *gomock.Controller
	recorder *MockLogCheckServerMockRecorder
}

// MockLogCheckServerMockRecorder is the mock recorder for MockLogCheckServer.
type MockLogCheckServerMockRecorder struct {
	mock *MockLogCheckServer
}

// NewMockLogCheckServer creates a new mock instance.
func NewMockLogCheckServer(ctrl *gomock.Controller) *MockLogCheckServer {
	mock := &MockLogCheckServer{ctrl: ctrl}
	mock.recorder = &MockLogCheckServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogCheckServer) EXPECT() *MockLogCheckServerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockLogCheckServer) Check(arg0 LogCheck_CheckServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockLogCheckServerMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockLogCheckServer)(nil).Check), arg0)
}

// mustEmbedUnimplementedLogCheckServer mocks base method.
func (m *MockLogCheckServer) mustEmbedUnimplementedLogCheckServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLogCheckServer")
}

// mustEmbedUnimplementedLogCheckServer indicates an expected call of mustEmbedUnimplementedLogCheckServer.
func (mr *MockLogCheckServerMockRecorder) mustEmbedUnimplementedLogCheckServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLogCheckServer", reflect.TypeOf((*MockLogCheckServer)(nil).mustEmbedUnimplementedLogCheckServer))
}

// MockUnsafeLogCheckServer is a mock of UnsafeLogCheckServer interface.
type MockUnsafeLogCheckServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLogCheckServerMockRecorder
}

// MockUnsafeLogCheckServerMockRecorder is the mock recorder for MockUnsafeLogCheckServer.
type MockUnsafeLogCheckServerMockRecorder struct {
	mock *MockUnsafeLogCheckServer
}

// NewMockUnsafeLogCheckServer creates a new mock instance.
func NewMockUnsafeLogCheckServer(ctrl *gomock.Controller) *MockUnsafeLogCheckServer {
	mock := &MockUnsafeLogCheckServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLogCheckServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLogCheckServer) EXPECT() *MockUnsafeLogCheckServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLogCheckServer mocks base method.
func (m *MockUnsafeLogCheckServer) mustEmbedUnimplementedLogCheckServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLogCheckServer")
}

// mustEmbedUnimplementedLogCheckServer indicates an expected call of mustEmbedUnimplementedLogCheckServer.
func (mr *MockUnsafeLogCheckServerMockRecorder) mustEmbedUnimplementedLogCheckServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLogCheckServer", reflect.TypeOf((*MockUnsafeLogCheckServer)(nil).mustEmbedUnimplementedLogCheckServer))
}

// MockLogCheck_CheckServer is a mock of LogCheck_CheckServer interface.
type MockLogCheck_CheckServer struct {
	ctrl     *gomock.Controller
	recorder *MockLogCheck_CheckServerMockRecorder
}

// MockLogCheck_CheckServerMockRecorder is the mock recorder for MockLogCheck_CheckServer.
type MockLogCheck_CheckServerMockRecorder struct {
	mock *MockLogCheck_CheckServer
}

// NewMockLogCheck_CheckServer creates a new mock instance.
func NewMockLogCheck_CheckServer(ctrl *gomock.Controller) *MockLogCheck_CheckServer {
	mock := &MockLogCheck_CheckServer{ctrl: ctrl}
	mock.recorder = &MockLogCheck_CheckServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogCheck_CheckServer) EXPECT() *MockLogCheck_CheckServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLogCheck_CheckServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLogCheck_CheckServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockLogCheck_CheckServer) Recv() (*LogObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*LogObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLogCheck_CheckServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLogCheck_CheckServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLogCheck_CheckServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockLogCheck_CheckServer) SendAndClose(arg0 *LogCheckResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockLogCheck_CheckServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockLogCheck_CheckServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLogCheck_CheckServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLogCheck_CheckServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLogCheck_CheckServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLogCheck_CheckServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLogCheck_CheckServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLogCheck_CheckServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLogCheck_CheckServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLogCheck_CheckServer)(nil).SetTrailer), arg0)
}

// MockHealthClient is a mock of HealthClient interface.
type MockHealthClient struct {
	ctrl     *gomock.Controller
	recorder *MockHealthClientMockRecorder
}

// MockHealthClientMockRecorder is the mock recorder for MockHealthClient.
type MockHealthClientMockRecorder struct {
	mock *MockHealthClient
}

// NewMockHealthClient creates a new mock instance.
func NewMockHealthClient(ctrl *gomock.Controller) *MockHealthClient {
	mock := &MockHealthClient{ctrl: ctrl}
	mock.recorder = &MockHealthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthClient) EXPECT() *MockHealthClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockHealthClientMockRecorder) Check(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthClient)(nil).Check), varargs...)
}

// MockHealthServer is a mock of HealthServer interface.
type MockHealthServer struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServerMockRecorder
}

// MockHealthServerMockRecorder is the mock recorder for MockHealthServer.
type MockHealthServerMockRecorder struct {
	mock *MockHealthServer
}

// NewMockHealthServer creates a new mock instance.
func NewMockHealthServer(ctrl *gomock.Controller) *MockHealthServer {
	mock := &MockHealthServer{ctrl: ctrl}
	mock.recorder = &MockHealthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthServer) EXPECT() *MockHealthServerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthServer) Check(arg0 context.Context, arg1 *HealthCheckRequest) (*HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockHealthServerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthServer)(nil).Check), arg0, arg1)
}

// mustEmbedUnimplementedHealthServer mocks base method.
func (m *MockHealthServer) mustEmbedUnimplementedHealthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServer")
}

// mustEmbedUnimplementedHealthServer indicates an expected call of mustEmbedUnimplementedHealthServer.
func (mr *MockHealthServerMockRecorder) mustEmbedUnimplementedHealthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServer", reflect.TypeOf((*MockHealthServer)(nil).mustEmbedUnimplementedHealthServer))
}

// MockUnsafeHealthServer is a mock of UnsafeHealthServer interface.
type MockUnsafeHealthServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHealthServerMockRecorder
}

// MockUnsafeHealthServerMockRecorder is the mock recorder for MockUnsafeHealthServer.
type MockUnsafeHealthServerMockRecorder struct {
	mock *MockUnsafeHealthServer
}

// NewMockUnsafeHealthServer creates a new mock instance.
func NewMockUnsafeHealthServer(ctrl *gomock.Controller) *MockUnsafeHealthServer {
	mock := &MockUnsafeHealthServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHealthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHealthServer) EXPECT() *MockUnsafeHealthServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHealthServer mocks base method.
func (m *MockUnsafeHealthServer) mustEmbedUnimplementedHealthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServer")
}

// mustEmbedUnimplementedHealthServer indicates an expected call of mustEmbedUnimplementedHealthServer.
func (mr *MockUnsafeHealthServerMockRecorder) mustEmbedUnimplementedHealthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServer", reflect.TypeOf((*MockUnsafeHealthServer)(nil).mustEmbedUnimplementedHealthServer))
}
