// Generating protobuf code
//
// For golang install protoc (if already not installed)
//    go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// and run the following command from the project's root directory
//    protoc --go_out=. --go-grpc_out=. gcs-migrator/protos/migrate.proto
//
// For python create virtualenv as below (if not created before)
//    virtualenv -p python3 env
//    pip install grpcio grpcio-tools google-cloud-storage
// Or activate existing env
//    source gcs-migrator/env/bin/activate
// then run the following command from the project root directory
//    ./gcs-migrator/codegen.py

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: gcs-migrator/protos/migrate.proto

package migrationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_Migrate_FullMethodName = "/migrationpb.Service/Migrate"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Migrate(ctx context.Context, opts ...grpc.CallOption) (Service_MigrateClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Migrate(ctx context.Context, opts ...grpc.CallOption) (Service_MigrateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_Migrate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceMigrateClient{stream}
	return x, nil
}

type Service_MigrateClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type serviceMigrateClient struct {
	grpc.ClientStream
}

func (x *serviceMigrateClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceMigrateClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Migrate(Service_MigrateServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Migrate(Service_MigrateServer) error {
	return status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Migrate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Migrate(&serviceMigrateServer{stream})
}

type Service_MigrateServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceMigrateServer struct {
	grpc.ServerStream
}

func (x *serviceMigrateServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceMigrateServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "migrationpb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Migrate",
			Handler:       _Service_Migrate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gcs-migrator/protos/migrate.proto",
}

const (
	LogCheck_Check_FullMethodName = "/migrationpb.LogCheck/Check"
)

// LogCheckClient is the client API for LogCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogCheckClient interface {
	Check(ctx context.Context, opts ...grpc.CallOption) (LogCheck_CheckClient, error)
}

type logCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewLogCheckClient(cc grpc.ClientConnInterface) LogCheckClient {
	return &logCheckClient{cc}
}

func (c *logCheckClient) Check(ctx context.Context, opts ...grpc.CallOption) (LogCheck_CheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogCheck_ServiceDesc.Streams[0], LogCheck_Check_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logCheckCheckClient{stream}
	return x, nil
}

type LogCheck_CheckClient interface {
	Send(*LogObject) error
	CloseAndRecv() (*LogCheckResponse, error)
	grpc.ClientStream
}

type logCheckCheckClient struct {
	grpc.ClientStream
}

func (x *logCheckCheckClient) Send(m *LogObject) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logCheckCheckClient) CloseAndRecv() (*LogCheckResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogCheckServer is the server API for LogCheck service.
// All implementations must embed UnimplementedLogCheckServer
// for forward compatibility
type LogCheckServer interface {
	Check(LogCheck_CheckServer) error
	mustEmbedUnimplementedLogCheckServer()
}

// UnimplementedLogCheckServer must be embedded to have forward compatible implementations.
type UnimplementedLogCheckServer struct {
}

func (UnimplementedLogCheckServer) Check(LogCheck_CheckServer) error {
	return status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedLogCheckServer) mustEmbedUnimplementedLogCheckServer() {}

// UnsafeLogCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogCheckServer will
// result in compilation errors.
type UnsafeLogCheckServer interface {
	mustEmbedUnimplementedLogCheckServer()
}

func RegisterLogCheckServer(s grpc.ServiceRegistrar, srv LogCheckServer) {
	s.RegisterService(&LogCheck_ServiceDesc, srv)
}

func _LogCheck_Check_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogCheckServer).Check(&logCheckCheckServer{stream})
}

type LogCheck_CheckServer interface {
	SendAndClose(*LogCheckResponse) error
	Recv() (*LogObject, error)
	grpc.ServerStream
}

type logCheckCheckServer struct {
	grpc.ServerStream
}

func (x *logCheckCheckServer) SendAndClose(m *LogCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logCheckCheckServer) Recv() (*LogObject, error) {
	m := new(LogObject)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogCheck_ServiceDesc is the grpc.ServiceDesc for LogCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "migrationpb.LogCheck",
	HandlerType: (*LogCheckServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Check",
			Handler:       _LogCheck_Check_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gcs-migrator/protos/migrate.proto",
}

const (
	Health_Check_FullMethodName = "/migrationpb.Health/Check"
)

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Health_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Health_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "migrationpb.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcs-migrator/protos/migrate.proto",
}
