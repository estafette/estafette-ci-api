// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package githubapi is a generated GoMock package.
package githubapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddApp mocks base method.
func (m *MockClient) AddApp(ctx context.Context, app GithubApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApp", ctx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddApp indicates an expected call of AddApp.
func (mr *MockClientMockRecorder) AddApp(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApp", reflect.TypeOf((*MockClient)(nil).AddApp), ctx, app)
}

// AddInstallation mocks base method.
func (m *MockClient) AddInstallation(ctx context.Context, installation GithubInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInstallation", ctx, installation)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInstallation indicates an expected call of AddInstallation.
func (mr *MockClientMockRecorder) AddInstallation(ctx, installation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstallation", reflect.TypeOf((*MockClient)(nil).AddInstallation), ctx, installation)
}

// ConvertAppManifestCode mocks base method.
func (m *MockClient) ConvertAppManifestCode(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertAppManifestCode", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConvertAppManifestCode indicates an expected call of ConvertAppManifestCode.
func (mr *MockClientMockRecorder) ConvertAppManifestCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertAppManifestCode", reflect.TypeOf((*MockClient)(nil).ConvertAppManifestCode), ctx, code)
}

// GetAppAndInstallationByID mocks base method.
func (m *MockClient) GetAppAndInstallationByID(ctx context.Context, installationID int) (*GithubApp, *GithubInstallation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppAndInstallationByID", ctx, installationID)
	ret0, _ := ret[0].(*GithubApp)
	ret1, _ := ret[1].(*GithubInstallation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppAndInstallationByID indicates an expected call of GetAppAndInstallationByID.
func (mr *MockClientMockRecorder) GetAppAndInstallationByID(ctx, installationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppAndInstallationByID", reflect.TypeOf((*MockClient)(nil).GetAppAndInstallationByID), ctx, installationID)
}

// GetAppAndInstallationByOwner mocks base method.
func (m *MockClient) GetAppAndInstallationByOwner(ctx context.Context, repoOwner string) (*GithubApp, *GithubInstallation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppAndInstallationByOwner", ctx, repoOwner)
	ret0, _ := ret[0].(*GithubApp)
	ret1, _ := ret[1].(*GithubInstallation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppAndInstallationByOwner indicates an expected call of GetAppAndInstallationByOwner.
func (mr *MockClientMockRecorder) GetAppAndInstallationByOwner(ctx, repoOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppAndInstallationByOwner", reflect.TypeOf((*MockClient)(nil).GetAppAndInstallationByOwner), ctx, repoOwner)
}

// GetAppByID mocks base method.
func (m *MockClient) GetAppByID(ctx context.Context, id int) (*GithubApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppByID", ctx, id)
	ret0, _ := ret[0].(*GithubApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppByID indicates an expected call of GetAppByID.
func (mr *MockClientMockRecorder) GetAppByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppByID", reflect.TypeOf((*MockClient)(nil).GetAppByID), ctx, id)
}

// GetApps mocks base method.
func (m *MockClient) GetApps(ctx context.Context) ([]*GithubApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", ctx)
	ret0, _ := ret[0].([]*GithubApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockClientMockRecorder) GetApps(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockClient)(nil).GetApps), ctx)
}

// GetEstafetteManifest mocks base method.
func (m *MockClient) GetEstafetteManifest(ctx context.Context, accesstoken AccessToken, event PushEvent) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstafetteManifest", ctx, accesstoken, event)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEstafetteManifest indicates an expected call of GetEstafetteManifest.
func (mr *MockClientMockRecorder) GetEstafetteManifest(ctx, accesstoken, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstafetteManifest", reflect.TypeOf((*MockClient)(nil).GetEstafetteManifest), ctx, accesstoken, event)
}

// GetGithubAppToken mocks base method.
func (m *MockClient) GetGithubAppToken(ctx context.Context, app GithubApp) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubAppToken", ctx, app)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubAppToken indicates an expected call of GetGithubAppToken.
func (mr *MockClientMockRecorder) GetGithubAppToken(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubAppToken", reflect.TypeOf((*MockClient)(nil).GetGithubAppToken), ctx, app)
}

// GetInstallationToken mocks base method.
func (m *MockClient) GetInstallationToken(ctx context.Context, app GithubApp, installation GithubInstallation) (AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallationToken", ctx, app, installation)
	ret0, _ := ret[0].(AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallationToken indicates an expected call of GetInstallationToken.
func (mr *MockClientMockRecorder) GetInstallationToken(ctx, app, installation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallationToken", reflect.TypeOf((*MockClient)(nil).GetInstallationToken), ctx, app, installation)
}

// JobVarsFunc mocks base method.
func (m *MockClient) JobVarsFunc(ctx context.Context) func(context.Context, string, string, string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobVarsFunc", ctx)
	ret0, _ := ret[0].(func(context.Context, string, string, string) (string, error))
	return ret0
}

// JobVarsFunc indicates an expected call of JobVarsFunc.
func (mr *MockClientMockRecorder) JobVarsFunc(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobVarsFunc", reflect.TypeOf((*MockClient)(nil).JobVarsFunc), ctx)
}

// RemoveApp mocks base method.
func (m *MockClient) RemoveApp(ctx context.Context, app GithubApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApp", ctx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveApp indicates an expected call of RemoveApp.
func (mr *MockClientMockRecorder) RemoveApp(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApp", reflect.TypeOf((*MockClient)(nil).RemoveApp), ctx, app)
}

// RemoveInstallation mocks base method.
func (m *MockClient) RemoveInstallation(ctx context.Context, installation GithubInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInstallation", ctx, installation)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveInstallation indicates an expected call of RemoveInstallation.
func (mr *MockClientMockRecorder) RemoveInstallation(ctx, installation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInstallation", reflect.TypeOf((*MockClient)(nil).RemoveInstallation), ctx, installation)
}
