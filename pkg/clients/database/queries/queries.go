// Code generated by gen_helpers.go DO NOT EDIT.
// Source: *.sql

// Package database is a generated GoMock package.
//go:build !helpers

package queries

import (
	"database/sql"
	_ "embed"
	"fmt"
	"strings"

	"github.com/rs/zerolog/log"
)

//go:generate go run -tags helpers gen_queries.go
var (
	//go:embed check_existing_migration.sql
	checkExistingMigration string
	//go:embed get_migrated_build_logs.sql
	getMigratedBuildLogs string
	//go:embed get_migrated_builds_count.sql
	getMigratedBuildsCount string
	//go:embed get_migrated_release_logs.sql
	getMigratedReleaseLogs string
	//go:embed get_migrated_releases_count.sql
	getMigratedReleasesCount string
	//go:embed get_migration_status.sql
	getMigrationStatus string
	//go:embed mark_repository_archived.sql
	markRepositoryArchived string
	//go:embed migrate_build_logs.sql
	migrateBuildLogs string
	//go:embed migrate_build_versions.sql
	migrateBuildVersions string
	//go:embed migrate_builds.sql
	migrateBuilds string
	//go:embed migrate_release_logs.sql
	migrateReleaseLogs string
	//go:embed migrate_releases.sql
	migrateReleases string
	//go:embed pick_migration.sql
	pickMigration string
	//go:embed queue_migration.sql
	queueMigration string
	//go:embed rollback_build_logs.sql
	rollbackBuildLogs string
	//go:embed rollback_build_versions.sql
	rollbackBuildVersions string
	//go:embed rollback_builds.sql
	rollbackBuilds string
	//go:embed rollback_computed_pipelines.sql
	rollbackComputedPipelines string
	//go:embed rollback_computed_releases.sql
	rollbackComputedReleases string
	//go:embed rollback_migration_task_queue.sql
	rollbackMigrationTaskQueue string
	//go:embed rollback_release_logs.sql
	rollbackReleaseLogs string
	//go:embed rollback_releases.sql
	rollbackReleases string
	//go:embed set_migration_id_for_pipeline.sql
	setMigrationIdForPipeline string
	//go:embed update_migration.sql
	updateMigration string
)

func Prepare(query string, args []sql.NamedArg) (string, []interface{}) {
	vals := make([]interface{}, 0)
	count := 1
	for _, arg := range args {
		param := fmt.Sprintf("@%s", arg.Name)
		if strings.Contains(query, param) {
			pos := fmt.Sprintf("$%d", count)
			query = strings.Replace(query, param, pos, -1)
			vals = append(vals, arg.Value)
			count++
		}
	}
	log.Debug().Str("migration-query", query).Interface("args", vals).Msg("prepared query")
	return query, vals
}

// CheckExistingMigration prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromName
//   - fromOwner
//   - fromSource
func CheckExistingMigration(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(checkExistingMigration, namedArg)
}

// GetMigratedBuildLogs prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func GetMigratedBuildLogs(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(getMigratedBuildLogs, namedArg)
}

// GetMigratedBuildsCount prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func GetMigratedBuildsCount(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(getMigratedBuildsCount, namedArg)
}

// GetMigratedReleaseLogs prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func GetMigratedReleaseLogs(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(getMigratedReleaseLogs, namedArg)
}

// GetMigratedReleasesCount prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func GetMigratedReleasesCount(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(getMigratedReleasesCount, namedArg)
}

// GetMigrationStatus prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - id
func GetMigrationStatus(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(getMigrationStatus, namedArg)
}

// MarkRepositoryArchived prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - pickedRepos
func MarkRepositoryArchived(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(markRepositoryArchived, namedArg)
}

// MigrateBuildLogs prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromName
//   - fromOwner
//   - fromSource
func MigrateBuildLogs(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(migrateBuildLogs, namedArg)
}

// MigrateBuildVersions prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromFullName
//   - fromSourceName
//   - toFullName
//   - toSourceName
func MigrateBuildVersions(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(migrateBuildVersions, namedArg)
}

// MigrateBuilds prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromName
//   - fromOwner
//   - fromSource
//   - toName
//   - toOwner
//   - toSource
func MigrateBuilds(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(migrateBuilds, namedArg)
}

// MigrateReleaseLogs prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromName
//   - fromOwner
//   - fromSource
func MigrateReleaseLogs(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(migrateReleaseLogs, namedArg)
}

// MigrateReleases prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromName
//   - fromOwner
//   - fromSource
//   - toName
//   - toOwner
//   - toSource
func MigrateReleases(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(migrateReleases, namedArg)
}

// PickMigration prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - maxTasks
func PickMigration(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(pickMigration, namedArg)
}

// QueueMigration prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - callbackURL
//   - fromName
//   - fromOwner
//   - fromSource
//   - id
//   - lastStep
//   - status
//   - toName
//   - toOwner
//   - toSource
func QueueMigration(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(queueMigration, namedArg)
}

// RollbackBuildLogs prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func RollbackBuildLogs(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackBuildLogs, namedArg)
}

// RollbackBuildVersions prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toFullName
//   - toSource
func RollbackBuildVersions(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackBuildVersions, namedArg)
}

// RollbackBuilds prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func RollbackBuilds(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackBuilds, namedArg)
}

// RollbackComputedPipelines prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func RollbackComputedPipelines(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackComputedPipelines, namedArg)
}

// RollbackComputedReleases prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func RollbackComputedReleases(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackComputedReleases, namedArg)
}

// RollbackMigrationTaskQueue prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromName
//   - fromOwner
//   - fromSource
func RollbackMigrationTaskQueue(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackMigrationTaskQueue, namedArg)
}

// RollbackReleaseLogs prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func RollbackReleaseLogs(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackReleaseLogs, namedArg)
}

// RollbackReleases prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - toName
//   - toOwner
//   - toSource
func RollbackReleases(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(rollbackReleases, namedArg)
}

// SetMigrationIdForPipeline prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - fromName
//   - fromOwner
//   - fromSource
//   - id
func SetMigrationIdForPipeline(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(setMigrationIdForPipeline, namedArg)
}

// UpdateMigration prepares a query for execution by replacing named parameters with positional parameters.
// Required NamedArg
//   - builds
//   - errorDetails
//   - id
//   - lastStep
//   - releases
//   - status
//   - totalDuration
func UpdateMigration(namedArg ...sql.NamedArg) (string, []interface{}) {
	return Prepare(updateMigration, namedArg)
}
